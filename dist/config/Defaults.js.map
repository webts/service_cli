{"version":3,"sources":["../../lib/config/Defaults.js"],"names":["defFiles","glob","sync","realpath","defFile","defaults","path","extname","yml","safeLoad","fs","readFileSync","err","console","error","JSON","parse","require","proxy","docker","messageBus","session","service","db","logging"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;eAGe,CAAC,MAAM;AAClB,MAAIA,QAAQ,GAAGC,cAAKC,IAAL,CACX,8CADW,EAEX;AACIC,IAAAA,QAAQ,EAAE;AADd,GAFW,CAAf;;AAMA,MAAIC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAtB;AACA,MAAIK,QAAQ,GAAG,EAAf;;AACA,MAAIC,cAAKC,OAAL,CAAaH,OAAb,MAA0B,MAA9B,EAAsC;AAClC,QAAI;AACAC,MAAAA,QAAQ,GAAGG,gBAAIC,QAAJ,CAAaC,YAAGC,YAAH,CAAgBP,OAAhB,EAAyB,OAAzB,CAAb,CAAX;AACH,KAFD,CAGA,OAAOQ,GAAP,EAAY;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,GAPD,MAQK,IAAIN,cAAKC,OAAL,CAAaH,OAAb,MAA0B,OAA9B,EAAuC;AACxC,QAAI;AACAC,MAAAA,QAAQ,GAAGU,IAAI,CAACC,KAAL,CAAWN,YAAGC,YAAH,CAAgBP,OAAhB,EAAyB,OAAzB,CAAX,CAAX;AACH,KAFD,CAGA,OAAOQ,GAAP,EAAY;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACJ,GAPI,MAQA,IAAIN,cAAKC,OAAL,CAAaH,OAAb,MAA0B,KAA9B,EAAqC;AACtCC,IAAAA,QAAQ,GAAGY,OAAO,CAACb,OAAD,CAAlB;AACH;;AAGD,MAAIC,QAAJ,EAAc;AACVA,IAAAA,QAAQ,GAAG,SAAc,EAAd,EAAkBA,QAAlB,CAAX;;AACA,QAAIa,KAAK,GAAID,OAAO,CAAC,cAAD,CAApB;AAAA,QACIE,MAAM,GAAIF,OAAO,CAAC,eAAD,CADrB;AAAA,QAEIG,UAAU,GAAIH,OAAO,CAAC,mBAAD,CAFzB;AAAA,QAGII,OAAO,GAAIJ,OAAO,CAAC,gBAAD,CAHtB;AAAA,QAIIK,OAAO,GAAIL,OAAO,CAAC,gBAAD,CAJtB;AAAA,QAKIM,EAAE,GAAIN,OAAO,CAAC,WAAD,CALjB;AAAA,QAMIO,OAAO,GAAIP,OAAO,CAAC,gBAAD,CANtB;;AAUAM,IAAAA,EAAE,GAAG,SAAc,EAAd,EAAkBA,EAAlB,EAAsBC,OAAtB,CAAL;AACAJ,IAAAA,UAAU,GAAG,SAAc,EAAd,EAAkBA,UAAlB,CAAb;AAEAC,IAAAA,OAAO,GAAG,SAAc,EAAd,EAAkBA,OAAlB,CAAV;AAEAH,IAAAA,KAAK,GAAG,SAAc,EAAd,EAAkBA,KAAlB,CAAR;AAEAI,IAAAA,OAAO,GAAG,SAAc,EAAd,EAAkBA,OAAlB,CAAV;AAEAjB,IAAAA,QAAQ,GAAG,SAAc,EAAd,EAAkBc,MAAlB,EAA0BI,EAA1B,EAA8BF,OAA9B,EAAuCD,UAAvC,EAAmDF,KAAnD,EAA0DI,OAA1D,EAAmEjB,QAAnE,CAAX;AAEH;;AAED,SAAOA,QAAP;AACH,CAxDc,G","sourcesContent":["import glob from 'glob';\r\nimport path from 'path';\r\nimport yml from 'js-yaml';\r\nimport fs from 'fs';\r\n\r\n\r\nexport default (() => {\r\n    let defFiles = glob.sync(\r\n        '**/+(config|defaults|default).+(js|json|yml)',\r\n        {\r\n            realpath: true\r\n        }\r\n    );\r\n    let defFile = defFiles[0];\r\n    let defaults = {};\r\n    if (path.extname(defFile) === '.yml') {\r\n        try {\r\n            defaults = yml.safeLoad(fs.readFileSync(defFile, 'utf-8'));\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n    else if (path.extname(defFile) === '.json') {\r\n        try {\r\n            defaults = JSON.parse(fs.readFileSync(defFile, 'utf-8'));\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n    else if (path.extname(defFile) === '.js') {\r\n        defaults = require(defFile);\r\n    }\r\n\r\n\r\n    if (defaults) {\r\n        defaults = Object.assign({}, defaults);\r\n        let proxy = (require('./proxy.json')),\r\n            docker = (require('./docker.json')),\r\n            messageBus = (require('./messageBus.json')),\r\n            session = (require('./session.json')),\r\n            service = (require('./service.json')),\r\n            db = (require('./db.json')),\r\n            logging = (require('./logging.json'))\r\n        ;\r\n\r\n\r\n        db = Object.assign({}, db, logging);\r\n        messageBus = Object.assign({}, messageBus);\r\n\r\n        session = Object.assign({}, session);\r\n\r\n        proxy = Object.assign({}, proxy);\r\n\r\n        service = Object.assign({}, service);\r\n\r\n        defaults = Object.assign({}, docker, db, session, messageBus, proxy, service, defaults);\r\n\r\n    }\r\n\r\n    return defaults;\r\n})();"],"file":"Defaults.js"}