{"version":3,"sources":["../lib/cli.js"],"names":["defaults","require","__dirname","default","__esModule","version","name","description","command","action","defs","existsSync","resolve","process","cwd","safeLoad","unlinkSync","writeFileSync","JSON","stringify","console","log","configs","cmd","filter","cf","kind","map","join","option","generateOnly","configFile","endsWith","parse","readFileSync","toString","root","dirname","then","err","error","db","media","serviceName","startDir","mkdirSync","servicePath","config","src","npm","safeDump","indent","argv"],"mappings":"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","file":"cli.js","sourcesContent":["\r\n\r\nimport args from 'commander';\r\nimport getConfigs, { build, cloneDB, composeStart, composeStop, composeUp, generate } from './utils/index';\r\nimport fs from 'fs';\r\nimport ejs from 'ejs';\r\nimport yaml from 'js-yaml';\r\nimport path from 'path';\r\nimport { exec } from 'child_process';\r\nlet defaults = require(__dirname + '/config/Defaults').default;\r\ndelete defaults.__esModule;\r\n\r\nargs\r\n    .version('0.1.0')\r\n    .name('service_cli')\r\n    .description('Micro-webservice CLI');\r\n\r\nargs.command('init')\r\n    .description('initiate default configuration')\r\n    .action(function () {\r\n        let defs = defaults;\r\n\r\n        if (fs.existsSync(path.resolve(process.cwd(), 'defaults.yml'))) {\r\n            defs = yaml.safeLoad(path.resolve(process.cwd(), 'defaults.yml'));\r\n            fs.unlinkSync(path.resolve(process.cwd(), 'defaults.yml'));\r\n        }\r\n\r\n        fs.writeFileSync(\r\n            path.resolve(process.cwd(), 'defaults.js'),\r\n            'module.exports = \\n' + JSON.stringify(defaults, null, 4) + ';'\r\n        );\r\n        console.log('defaults.js created');\r\n\r\n    });\r\n\r\nargs.command(\"clean\")\r\n    .description('remove all service images')\r\n    .action(async function () {\r\n        let configs = getConfigs();\r\n        const cmd = 'docker rm ' + configs.filter((cf) => cf.kind === 'service').map((cf) => cf.name).join(' ');\r\n        console.log('remove all service containers \"' + cmd + '\"');\r\n        await exec(cmd);\r\n    });\r\n\r\nargs.command(\"build\")\r\n    .description('generate docker files and docker compose')\r\n    .option(\r\n    '-g, --generateOnly',\r\n    'generate Dockerfiles without building images'\r\n    )\r\n    .action(async function (command) {\r\n        console.log('building...' + command.generateOnly);\r\n        let configs = getConfigs();\r\n\r\n        generate(configs, defaults);\r\n        if (!command.generateOnly) {\r\n            await (async () => {\r\n                const cmd = 'docker rm ' + configs.filter((cf) => cf.kind === 'service').map((cf) => cf.name).join(' ');\r\n                console.log('remove all service containes \"' + cmd + '\"');\r\n                await exec(cmd);\r\n            })();\r\n            await composeUp();\r\n        }\r\n        console.log('build done');\r\n    });\r\n\r\nargs.command('run <configFile>')\r\n    .description('run the service with configuration')\r\n    .action(function (configFile) {\r\n        if (typeof configFile === 'undefined') configFile = './run.config.json';\r\n        if (!configFile.endsWith('.json')) {\r\n\r\n        }\r\n        if (configFile === './') configFile = './run.config.json';\r\n\r\n        if (fs.existsSync(configFile)) {\r\n            try {\r\n                const cf = JSON.parse(fs.readFileSync(configFile).toString());\r\n                if (!('root' in cf))\r\n                    cf.root = path.dirname(configFile);\r\n                build(cf).then(() => {\r\n                    exec(\"yarn start\", { cwd: cf.root });\r\n                });\r\n\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        else {\r\n            console.log('Configuration file does not exist');\r\n        }\r\n    });\r\n\r\nargs.command('stop')\r\n    .description('stop all docker services')\r\n    .action(function () {\r\n        composeStop().then(() => console.log('all stopped'));\r\n    });\r\n\r\nargs.command('start')\r\n    .description('start all docker services')\r\n    .action(function () {\r\n        composeStart().then(() => console.log('all started'));\r\n    });\r\n\r\nargs.command('clone db media')\r\n    .description('clone db with media')\r\n    .action(function (db, media) {\r\n        cloneDB(db, media);\r\n    });\r\n\r\nargs.command('create <serviceName> [startDir]')\r\n    .description('create a service folder. must be run from parent project root')\r\n    .action(function (serviceName, startDir) {\r\n        startDir = startDir || path.resolve(process.cwd(), 'services/');\r\n\r\n        if (!fs.existsSync(startDir))\r\n            fs.mkdirSync(startDir);\r\n\r\n        if (fs.existsSync(path.resolve(startDir, serviceName))) {\r\n            console.log('service already exists');\r\n        }\r\n        else {\r\n            const servicePath = path.resolve(startDir, serviceName);\r\n            const kind = serviceName === 'proxy' ? 'proxy' : 'service';\r\n            let config = {\r\n                kind,\r\n                name: serviceName,\r\n                src: ['./app/src/*.js'],\r\n                npm: []\r\n            };\r\n\r\n            fs.mkdirSync(`${servicePath}`);\r\n            fs.mkdirSync(`${servicePath}/app/`);\r\n            fs.mkdirSync(`${servicePath}/app/src`);\r\n            \r\n            fs.writeFileSync(`${servicePath}/service.config.yml`,\r\n                yaml.safeDump(config, { indent: 4 })\r\n            );\r\n\r\n            console.log('You can use git submodule to init git for ' + serviceName + '/');\r\n        }\r\n\r\n    });\r\n\r\nargs.parse(process.argv);\r\n\r\n"]}