{"version":3,"sources":["../lib/cli.js"],"names":["defaults","require","__dirname","default","__esModule","version","name","description","command","action","defs","existsSync","resolve","process","cwd","safeLoad","unlinkSync","writeFileSync","JSON","stringify","console","log","configs","configFile","endsWith","Error","cf","parse","readFileSync","toString","root","then","service","buildService","start","err","error","db","media","serviceName","startDir","mkdirSync","servicePath","kind","config","src","npm","pkg","render","cfg","safeDump","indent","argv"],"mappings":";;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;AAJA;AAKA,IAAKA,WAAWC,QAAQC,YAAY,kBAApB,EAAwCC,OAAxD;;AACA,OAAOH,SAASI,UAAhB;;AAEA,mBACKC,OADL,CACa,OADb,EAEKC,IAFL,CAEU,aAFV,EAGKC,WAHL,CAGiB,sBAHjB;;AAKA,mBAAKC,OAAL,CAAa,MAAb,EACKD,WADL,CACiB,gCADjB,EAEKE,MAFL,CAEY,YAAY;AAChB,MAAIC,OAAOV,QAAX;;AAEA,MAAG,YAAGW,UAAH,CAAc,cAAKC,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,cAA5B,CAAd,CAAH,EACA;AACIJ,WAAO,gBAAKK,QAAL,CAAc,cAAKH,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,cAA5B,CAAd,CAAP;;AACA,gBAAGE,UAAH,CAAc,cAAKJ,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,cAA5B,CAAd;AACH;;AAED,cAAGG,aAAH,CACI,cAAKL,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,aAA5B,CADJ,EAEI,sBAAsBI,KAAKC,SAAL,CAAenB,QAAf,CAAtB,GAAiD,GAFrD;;AAIAoB,UAAQC,GAAR,CAAY,qBAAZ;AAEH,CAjBL;;AAmBA,mBAAKb,OAAL,CAAa,OAAb,EACKD,WADL,CACiB,0CADjB,EAEKE,MAFL,CAEY,kBAAkB;AACtBW,UAAQC,GAAR,CAAY,aAAZ;AACA,MAAIC,UAAU,qBAAd;AAEA,4BAAcA,OAAd;AACA,QAAM,uBAAN;AACAF,UAAQC,GAAR,CAAY,YAAZ;AACH,CATL;;AAWA,mBAAKb,OAAL,CAAa,kBAAb,EACKD,WADL,CACiB,oCADjB,EAEKE,MAFL,CAEY,UAAUc,UAAV,EAAsB;AAC1B,MAAI,OAAOA,UAAP,KAAsB,WAA1B,EAAuCA,aAAa,mBAAb;AACvC,MAAI,CAACA,WAAWC,QAAX,CAAoB,OAApB,CAAL,EAAmC,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACnC,MAAIF,eAAe,IAAnB,EAAyBA,aAAa,mBAAb;;AAEzB,MAAI,YAAGZ,UAAH,CAAcY,UAAd,CAAJ,EAA+B;AAC3B,QAAI;AACA,YAAMG,KAAKR,KAAKS,KAAL,CAAW,YAAGC,YAAH,CAAgBL,UAAhB,EAA4BM,QAA5B,EAAX,CAAX;AACAH,SAAGI,IAAH,GAAU,UAAV;AACA,wBAAMJ,EAAN,EAAUK,IAAV,CAAe,MAAM;AACjB,cAAMC,UAAUC,aAAaP,EAAb,CAAhB;AACA,YAAIM,YAAY,IAAhB,EACIA,QAAQE,KAAR;AACP,OAJD;AAMH,KATD,CASE,OAAOC,GAAP,EAAY;AACVf,cAAQgB,KAAR,CAAcD,GAAd;AACH;AACJ,GAbD,MAcK;AACDf,YAAQC,GAAR,CAAY,+BAAZ;AACH;AACJ,CAxBL;;AA0BA,mBAAKb,OAAL,CAAa,MAAb,EACKD,WADL,CACiB,0BADjB,EAEKE,MAFL,CAEY,YAAY;AAChB,4BAAcsB,IAAd,CAAmB,MAAMX,QAAQC,GAAR,CAAY,aAAZ,CAAzB;AACH,CAJL;;AAMA,mBAAKb,OAAL,CAAa,OAAb,EACKD,WADL,CACiB,2BADjB,EAEKE,MAFL,CAEY,YAAY;AAChB,6BAAesB,IAAf,CAAoB,MAAMX,QAAQC,GAAR,CAAY,aAAZ,CAA1B;AACH,CAJL;;AAMA,mBAAKb,OAAL,CAAa,gBAAb,EACKD,WADL,CACiB,qBADjB,EAEKE,MAFL,CAEY,UAAU4B,EAAV,EAAcC,KAAd,EAAqB;AACzB,sBAAQD,EAAR,EAAYC,KAAZ;AACH,CAJL;;AAMA,mBAAK9B,OAAL,CAAa,iCAAb,EACKD,WADL,CACiB,+DADjB,EAEKE,MAFL,CAEY,UAAU8B,WAAV,EAAuBC,QAAvB,EAAiC;AACrCA,aAAWA,YAAY,cAAK5B,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,WAA5B,CAAvB;AAEA,MAAG,CAAC,YAAGH,UAAH,CAAc6B,QAAd,CAAJ,EACI,YAAGC,SAAH,CAAaD,QAAb;;AAEJ,MAAI,YAAG7B,UAAH,CAAc,cAAKC,OAAL,CAAa4B,QAAb,EAAuBD,WAAvB,CAAd,CAAJ,EAAwD;AACpDnB,YAAQC,GAAR,CAAY,wBAAZ;AACH,GAFD,MAGK;AACD,UAAMqB,cAAc,cAAK9B,OAAL,CAAa4B,QAAb,EAAuBD,WAAvB,CAApB;;AACA,UAAMI,OAAOJ,gBAAgB,OAAhB,GAA0B,OAA1B,GAAoC,SAAjD;AACA,QAAIK,SAAQ;AACRD,UADQ;AAERrC,YAAMiC,WAFE;AAGRM,WAAK,CAAC,gBAAD,CAHG;AAIRC,WAAI;AAJI,KAAZ;;AAOA,gBAAGL,SAAH,CAAc,GAAEC,WAAY,EAA5B;;AACA,gBAAGD,SAAH,CAAc,GAAEC,WAAY,OAA5B;;AACA,gBAAGD,SAAH,CAAc,GAAEC,WAAY,UAA5B;;AAEA,QAAIK,MAAM,aAAIC,MAAJ,CAAW,YAAGpB,YAAH,CAAgB1B,YAAY,8BAA5B,EAA4D2B,QAA5D,EAAX,EAAmFe,MAAnF,CAAV;;AACA,QAAIK,MAAM,aAAID,MAAJ,CAAW,YAAGpB,YAAH,CAAgB1B,YAAY,4BAA5B,EAA0D2B,QAA1D,EAAX,EAAiFe,MAAjF,CAAV;;AACA,gBAAG3B,aAAH,CAAkB,GAAEyB,WAAY,eAAhC,EAAgDK,GAAhD;;AACA,gBAAG9B,aAAH,CAAkB,GAAEyB,WAAY,gBAAhC,EAAiDO,GAAjD;;AACA,gBAAGhC,aAAH,CAAkB,GAAEyB,WAAY,SAAhC,EAA0C,YAAGd,YAAH,CAAgB1B,YAAY,uBAA5B,EAAqD2B,QAArD,EAA1C;;AACA,gBAAGZ,aAAH,CAAkB,GAAEyB,WAAY,qBAAhC,EAAsD,YAAGd,YAAH,CAAgB1B,YAAY,yBAA5B,EAAuD2B,QAAvD,EAAtD;;AACA,gBAAGZ,aAAH,CAAkB,GAAEyB,WAAY,WAAhC,EAA4C,YAAGd,YAAH,CAAgB1B,YAAY,wBAA5B,EAAsD2B,QAAtD,EAA5C;;AAEA,gBAAGZ,aAAH,CAAkB,GAAEyB,WAAY,qBAAhC,EACI,gBAAKQ,QAAL,CAAcN,MAAd,EAAsB;AAACO,cAAQ;AAAT,KAAtB,CADJ;;AAIA/B,YAAQC,GAAR,CAAY,+CAA+CkB,WAA/C,GAA6D,GAAzE;AACH;AAEJ,CAxCL;;AA0CA,mBAAKZ,KAAL,CAAWd,QAAQuC,IAAnB","file":"cli.js","sourcesContent":["\r\n\r\nimport args from 'commander';\r\nimport getConfigs, {build, cloneDB, composeStart, composeStop, composeUp, generateFiles} from './utils/index';\r\n//import {buildService} from './utils/factory';\r\nimport fs from 'fs';\r\nimport ejs from 'ejs';\r\nimport yaml from 'js-yaml';\r\nimport path from 'path';\r\nlet  defaults = require(__dirname + '/config/Defaults').default;\r\ndelete defaults.__esModule;\r\n\r\nargs\r\n    .version('0.1.0')\r\n    .name('service_cli')\r\n    .description('Micro-webservice CLI');\r\n\r\nargs.command('init')\r\n    .description('initiate default configuration')\r\n    .action(function () {\r\n        let defs = defaults;\r\n\r\n        if(fs.existsSync(path.resolve(process.cwd(), 'defaults.yml')))\r\n        {\r\n            defs = yaml.safeLoad(path.resolve(process.cwd(), 'defaults.yml'));\r\n            fs.unlinkSync(path.resolve(process.cwd(), 'defaults.yml'));\r\n        }\r\n\r\n        fs.writeFileSync(\r\n            path.resolve(process.cwd(), 'defaults.js'),\r\n            'modules.export = ' + JSON.stringify(defaults) + ';'\r\n        );\r\n        console.log('defaults.js created');\r\n\r\n    });\r\n\r\nargs.command(\"build\")\r\n    .description('generate docker files and docker compose')\r\n    .action(async function () {\r\n        console.log('building...');\r\n        let configs = getConfigs();\r\n\r\n        generateFiles(configs);\r\n        await composeUp();\r\n        console.log('build done');\r\n    });\r\n\r\nargs.command('run <configFile>')\r\n    .description('run the service with configuration')\r\n    .action(function (configFile) {\r\n        if (typeof configFile === 'undefined') configFile = './run.config.json';\r\n        if (!configFile.endsWith('.json')) throw new Error('Invalid configuration file');\r\n        if (configFile === './') configFile = './run.config.json';\r\n\r\n        if (fs.existsSync(configFile)) {\r\n            try {\r\n                const cf = JSON.parse(fs.readFileSync(configFile).toString());\r\n                cf.root = './build/';\r\n                build(cf).then(() => {\r\n                    const service = buildService(cf);\r\n                    if (service !== null)\r\n                        service.start();\r\n                });\r\n\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        else {\r\n            console.log('Configuration file not exists');\r\n        }\r\n    });\r\n\r\nargs.command('stop')\r\n    .description('stop all docker services')\r\n    .action(function () {\r\n        composeStop().then(() => console.log('all stopped'));\r\n    });\r\n\r\nargs.command('start')\r\n    .description('start all docker services')\r\n    .action(function () {\r\n        composeStart().then(() => console.log('all started'));\r\n    });\r\n\r\nargs.command('clone db media')\r\n    .description('clone db with media')\r\n    .action(function (db, media) {\r\n        cloneDB(db, media);\r\n    });\r\n\r\nargs.command('create <serviceName> [startDir]')\r\n    .description('create a service folder. must be run from parent project root')\r\n    .action(function (serviceName, startDir) {\r\n        startDir = startDir || path.resolve(process.cwd(), 'services/');\r\n\r\n        if(!fs.existsSync(startDir))\r\n            fs.mkdirSync(startDir);\r\n\r\n        if (fs.existsSync(path.resolve(startDir, serviceName))) {\r\n            console.log('service already exists');\r\n        }\r\n        else {\r\n            const servicePath = path.resolve(startDir, serviceName);\r\n            const kind = serviceName === 'proxy' ? 'proxy' : 'service';\r\n            let config ={\r\n                kind,\r\n                name: serviceName,\r\n                src: ['./app/src/*.js'],\r\n                npm:[]\r\n            };\r\n\r\n            fs.mkdirSync(`${servicePath}`);\r\n            fs.mkdirSync(`${servicePath}/app/`);\r\n            fs.mkdirSync(`${servicePath}/app/src`);\r\n\r\n            let pkg = ejs.render(fs.readFileSync(__dirname + '/templates/_package.json.ejs').toString(), config);\r\n            let cfg = ejs.render(fs.readFileSync(__dirname + '/templates/_app.config.ejs').toString(), config);\r\n            fs.writeFileSync(`${servicePath}/package.json`, pkg);\r\n            fs.writeFileSync(`${servicePath}/app.config.js`, cfg);\r\n            fs.writeFileSync(`${servicePath}/app.js`, fs.readFileSync(__dirname + '/templates/app.js.ejs').toString());\r\n            fs.writeFileSync(`${servicePath}/app/src/handler.js`, fs.readFileSync(__dirname + '/templates/_handler.ejs').toString());\r\n            fs.writeFileSync(`${servicePath}/.babelrc`, fs.readFileSync(__dirname + '/templates/babelrc.ejs').toString());\r\n\r\n            fs.writeFileSync(`${servicePath}/service.config.yml`,\r\n                yaml.safeDump(config, {indent: 4})\r\n            );\r\n\r\n            console.log('You can use git submodule to init git for ' + serviceName + '/');\r\n        }\r\n\r\n    });\r\n\r\nargs.parse(process.argv);\r\n\r\n"]}