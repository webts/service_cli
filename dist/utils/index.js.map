{"version":3,"sources":["../../lib/utils/index.js"],"names":["start","up","stop","exec","require","multiArgs","defaults","__dirname","default","module","exports","generate","composeUp","yml","cwd","process","log","console","err","error","composeStop","composeStart","cloneDB","db","media","build","config","name","root","cfs","sync","nodir","ignore","map","filePath","obj","kind","ext","toLowerCase","parent","content","JSON","parse","node_env","env","NODE_ENV","docker","service","logging","session","messageBus","copy","src","deps","Array","isArray","existsSync","join","mkdirSync","forEach","dep","parents","push","prototype","apply","views","p","startsWith","replace","networks","working_dir","proxyService"],"mappings":"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","file":"index.js","sourcesContent":["import glob from 'glob';\r\nimport composeRunner from 'docker-compose';\r\nimport ejs from 'ejs';\r\nimport cpy from 'cpy';\r\nimport rimraf from 'rimraf';\r\nimport {promisify} from 'util';\r\nimport fs,{readFileSync, realpathSync, writeFileSync} from 'fs';\r\nimport path, {dirname, extname, resolve} from 'path';\r\nimport {safeLoad, safeDump} from 'js-yaml';\r\n\r\nconst start = promisify(composeRunner.up);\r\nconst stop = promisify(composeRunner.stop);\r\nconst exec = promisify(require('child_process').exec, {multiArgs: true});\r\nlet defaults = require(__dirname + '/../config/Defaults').default;\r\n\r\n\r\nimport generate from './generator';\r\n\r\nmodule.exports.generate = generate;\r\n\r\nexport async function composeUp(yml) {\r\n    try {\r\n        await start({cwd: process.cwd(), log: true});\r\n        console.log('docker containers started');\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nexport async function composeStop(yml) {\r\n    try {\r\n        await stop({cwd: process.cwd(), log: true});\r\n        console.log('docker containers stopped');\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport async function composeStart(yml) {\r\n    try {\r\n        await exec('docker-compose start');\r\n        console.log('docker containers stopped');\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport async function cloneDB(db, media) {\r\n    media = media || true;\r\n    try {\r\n        console.log('db cloning');\r\n        await exec(`docker-compose run --rm commander clone ${db} ${media}`);\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport async function build(config) {\r\n    console.log(`building ${config.name}` )\r\n    await exec('yarn install',{cwd: config.root});\r\n    await exec('yarn build',{cwd: config.root});\r\n}\r\n\r\nexport default () => {\r\n    const cfs = glob.sync('**/service.config.?(js|json|yml)', {\r\n        nodir: true,\r\n        ignore: ['**/node_modules/**', 'build/**', 'lib/**', 'src/**','dist/**']\r\n    });\r\n    return cfs\r\n        .map((filePath) => {\r\n            let obj = {kind: ''};\r\n\r\n            const ext = extname(filePath).toLowerCase();\r\n            const parent = dirname(filePath);\r\n            try {\r\n                if (ext === '.json') {\r\n                    let content = readFileSync(realpathSync(filePath));\r\n                    obj = JSON.parse(content);\r\n                }\r\n                else if (ext === '.yml') {\r\n                    obj = safeLoad(readFileSync(filePath), 'utf-8');\r\n                }\r\n                else if (ext === '.js') {\r\n                    obj = require(realpathSync('./' + filePath));\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n            }\r\n\r\n            console.log('found config ' + obj.name)\r\n\r\n            obj.node_env = process.env.NODE_ENV || 'dev';\r\n            obj.root = parent;\r\n\r\n            return obj;\r\n        })\r\n        .map((config) => {\r\n            switch (config.kind) {\r\n                case \"service\": {\r\n                    config = Object.assign({}, defaults.docker.service, defaults.service, config);\r\n                    config = Object.assign(\r\n                        {\r\n                            db: Object.assign(defaults.db, {logging: defaults.logging}),\r\n                            session: Object.assign(defaults.session, {logging: defaults.logging}),\r\n                            messageBus: Object.assign(defaults.messageBus, {logging: defaults.logging}),\r\n                            logging: defaults.logging\r\n                        },\r\n                        config);\r\n\r\n                    config.copy = [];\r\n\r\n                    if(!'src' in config){                           \r\n                        if ('deps' in config) {\r\n                            config.src = config.deps;\r\n                        }\r\n                    }else if('deps' in config){\r\n                        let deps = [config.deps];\r\n                        if (Array.isArray(config.deps))\r\n                            deps = config.deps;\r\n                        if(!fs.existsSync(path.join(config.root,'app','lib')))\r\n                            fs.mkdirSync(path.join(config.root,'app','lib'));\r\n                        if(!fs.existsSync(path.join(config.root,'app','lib','deps')))\r\n                            fs.mkdirSync(path.join(config.root,'app','lib','deps'));\r\n                        else\r\n                            rimraf.sync(path.join(config.root,'app','lib','deps') + \"/**\");\r\n                            \r\n                        deps.forEach((dep) => {\r\n                            console.log('cpy ' +dep)\r\n                            cpy(dep, path.join(config.root,'app','lib','deps'),{cwd:process.cwd(),parents:false,nodir:true});\r\n                            \r\n                        });\r\n                        config.deps = ['./app/lib/deps/**']\r\n                        config.copy.push('./app/lib/deps');\r\n                    }                    \r\n\r\n                    if ('src' in config) {\r\n                        if (Array.isArray(config.src))\r\n                            Array.prototype.push.apply(config.copy, config.src);\r\n                        else\r\n                            config.copy.push(config.src);\r\n                    }\r\n\r\n                    if ('views' in config) {\r\n                        if (Array.isArray(config.views))\r\n                            Array.prototype.push.apply(config.copy, config.views);\r\n                        else\r\n                            config.copy.push(config.views);\r\n                    }\r\n\r\n                    if(typeof config.copy !== 'undefined'){\r\n                        config.copy.forEach((p) => {\r\n                            if(p.startsWith('./')) p = p.replace('./', config.root + '/');\r\n                        })\r\n                    }\r\n\r\n                    if('networks' in defaults && 'internal' in defaults.networks){\r\n                        config = Object.assign({networks: 'internal'}, config);\r\n                    }\r\n\r\n                    if(!('working_dir' in config)){\r\n                        config.working_dir = '/usr/src/app';\r\n                    }\r\n                    break;\r\n                }\r\n                case 'proxy':\r\n                    config = Object.assign({}, defaults.docker.proxyService, defaults.proxyService, config);\r\n                    if('networks' in defaults && 'proxy' in defaults.networks){\r\n                        config = Object.assign({networks: 'proxy'}, config);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return config;\r\n        });\r\n}\r\n"]}